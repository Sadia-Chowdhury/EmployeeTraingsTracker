@page "/TrainingInfo"
@attribute [Authorize(Roles = "Admin")]
@rendermode InteractiveServer
@using EmployeeTraingsTracker.Components.UIControl
@using EmployeeTraingsTracker.Services
@using EmployeeTraingsTracker.Model
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ITrainingInfoService TrainingInfoService
@inject ICategoryService categoryService

<div class="grid grid-cols-1 gap-6 sm:grid-cols-2 lg:grid-cols-3">
    <div>
        <label class="block text-sm font-medium leading-6 text-gray-900 mb-2">Training Name</label>
        <input @bind-value="TrainingInfoObject.Title"
               type="text"
               placeholder="Enter Training Name"
               class="block w-full rounded-md border-0 px-3 py-2 text-gray-900 shadow-sm ring-1 ring-inset ring-gray-300 placeholder:text-gray-400 focus:ring-2 focus:ring-inset focus:ring-indigo-600 sm:text-sm sm:leading-6" />
    </div>

    <div>
        <select @bind="TrainingInfoObject.CategoryID" data-dropdown-toggle="dropdownSearch" class="w-full border border-gray-300 rounded-lg p-3">
            @if (categories !=null) { 
            @foreach (var ctg in categories)
            {
                @if(ctg.IsActive==true)
                    {
                         <option value=@ctg.CategoryId>@ctg.CategoryName</option>
                    }
                   
            }
            }
        </select>
    </div>
    
    <div>
        <label class="inline-flex items-center cursor-pointer">
          <input type="checkbox" @bind="TrainingInfoObject.IsActive" class="sr-only peer">
          <div class="relative w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full rtl:peer-checked:after:-translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:start-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600 dark:peer-checked:bg-blue-600">
          </div>
          <span class="ms-3 text-sm font-medium text-gray-900 dark:text-gray-300"> 
              @(TrainingInfoObject.IsActive ? "Active" : "Inactive")
          </span>
        </label>
    </div>

   <div class="flex items-end">
            <button type="button"
                @onclick="SaveTraining"
                    class="rounded-md bg-indigo-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-indigo-500 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600">
                @(isEditing ? "Update Trainings" : "Add Trainings")
            </button>

            @if (isEditing)
            {
                <button type="button"
                        @onclick="CancelEdit"
                        class="ml-2 rounded-md bg-gray-600 px-4 py-2 text-sm font-semibold text-white shadow-sm hover:bg-gray-500">
                    Cancel
                </button>
            }
        </div>

</div>

@* Training List
 *@


<div class="bg-white shadow rounded-2xl p-6 mt-6">
    <h4 class="text-lg font-semibold mb-4">Training List</h4>

    @if (TrainingList == null)
    {
        <p class="text-gray-500">Loading Trainings...</p>
    }
    else if (TrainingList.Count == 0)
    {
        <p class="text-gray-500">No Trainings found. Total count: @(TrainingList?.Count ?? 0)</p>
    }
    else
    {
        <div class="overflow-x-auto">
            <table class="w-full border-collapse border border-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="border border-gray-200 p-3 text-left font-medium text-gray-700">ID</th>
                        <th class="border border-gray-200 p-3 text-left font-medium text-gray-700">Training Name</th>
                        <th class="border border-gray-200 p-3 text-left font-medium text-gray-700">Category Name</th>
                        <th class="border border-gray-200 p-3 text-left font-medium text-gray-700">Status</th>
                        <th class="border border-gray-200 p-3 text-center font-medium text-gray-700">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var trng in TrainingList)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="border border-gray-200 p-3">
                                <div class="font-medium text-gray-900">@trng.TrainingId</div>
                            </td>
                            <td class="border border-gray-200 p-3">
                                @if (!string.IsNullOrEmpty(trng.Title))
                                {
                                    <span class="text-gray-900">@trng.Title</span>
                                }
                                else
                                {
                                    <span class="text-gray-400">-</span>
                                }
                            </td>
                            <td class="border border-gray-200 p-3">
                                @foreach(var ctg in categories)
                                {
                                    if(ctg.CategoryId==trng.CategoryID)
                                    {
                                        <span class="text-gray-900">@ctg.CategoryName</span>
                                    }
                                }
                            </td>
                            <td class="border border-gray-200 p-3">
                                @if (trng.IsActive == true)
                                {
                                    <span class="text-gray-900">Active</span>
                                }
                                else
                                {
                                    <span class="text-gray-400">Not Active</span>
                                }
                            </td>
                            <td class="border border-gray-200 p-3 text-center">
                                <div class="flex gap-2 justify-center">
                                    <button type="button"
                                            class="bg-blue-600 text-white px-3 py-1 rounded text-sm hover:bg-blue-700 transition duration-200"
                                            @onclick="() => EditTrainingInfo(trng)">
                                        Edit
                                    </button>
                                    <button type="button"
                                            class="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition duration-200"
                                            @onclick="() => DeleteTraingInfo(trng.TrainingId)">
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>


@code
{

    private bool IsActive1 { get; set; } = false;

    private List<TrainingInfo> TrainingList;
    private List<TrainingCatagory> categories;
    private string errorMessage = string.Empty;
    private bool isEditing = false;
    private string successMessage = "";

    private TrainingInfo TrainingInfoObject { get; set; } = new();
    private AuthenticationState authState;
    protected override async Task OnInitializedAsync()
    {
        authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        categories = await categoryService.GetAllAsync();
        await LoadTrainingInfo();

    }
    private async Task SaveTrainings()
    {
        if (string.IsNullOrWhiteSpace(TrainingInfoObject.Title))
        {
            errorMessage = "Training Name is required.";
            return;
        }

        try
        {
            if (isEditing)
            {
                await TrainingInfoService.UpdateAsync(TrainingInfoObject);
                successMessage = "Category updated successfully.";
            }
            else
            {
                await TrainingInfoService.Save(TrainingInfoObject);
                successMessage = "Category added successfully.";
            }

            await LoadTrainingInfo(); // Reload the list after saving
            ClearForm();
            StateHasChanged(); // Force UI refresh
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving trainings: {ex.Message}";
            Console.WriteLine($"Error in saveing Trainings: {ex}");
        }
    }
    private void ClearForm()
    {
        TrainingInfoObject = new();
    }

    private async Task EditTrainingInfo(TrainingInfo traininginfo)
    
    {
        try
        {
            var trainingToEdit = await TrainingInfoService.GetByIdAsync(traininginfo.TrainingId);
            if (trainingToEdit != null)
            {
                TrainingInfoObject = new TrainingInfo
                {
                    TrainingId = trainingToEdit.TrainingId,
                    Title = trainingToEdit.Title,
                    IsActive = trainingToEdit.IsActive
                };
                isEditing = true;
                ClearMessages();
               // ClearMessages();
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading category for editing: {ex.Message}";
        }
    }

    private async Task DeleteTraingInfo(int trainingId)
    {
        //ClearMessages();

        try
        {
            await TrainingInfoService.DeleteAsync(trainingId);
            //successMessage = "Category deleted successfully.";
            await LoadTrainingInfo();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error deleting category: {ex.Message}";
        }
    }

    private async Task LoadTrainingInfo()
    {
        try
        {
            TrainingList = await TrainingInfoService.GetAllAsync();
       
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading TrainingInfo: {ex.Message}";
            Console.WriteLine($"Error in TrainingInfo: {ex}"); // Debug log
        }
    }

    private async Task SaveTraining()
    {
        ClearMessages();

        // Basic validation
        if (string.IsNullOrWhiteSpace(TrainingInfoObject.Title))
        {
            errorMessage = "Training name is required.";
            return;
        }

        try
        {
            if (isEditing)
            {
                await TrainingInfoService.UpdateAsync(TrainingInfoObject);
                successMessage = "Training updated successfully.";
            }
            else
            {
                await TrainingInfoService.Save(TrainingInfoObject);
                successMessage = "Training added successfully.";
            }

            await LoadTrainingInfo(); // Reload the list after saving
            ClearForm();
            StateHasChanged(); // Force UI refresh
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving category: {ex.Message}";
            Console.WriteLine($"Error in SaveCategory: {ex}");
        }
    }

      private void ClearMessages()
    {
        errorMessage = "";
        successMessage = "";
    }

    private void CancelEdit()
    {
        ClearForm();
        ClearMessages();
    }

}
