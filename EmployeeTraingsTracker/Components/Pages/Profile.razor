@page "/Profile"
@attribute [Authorize(Roles = "Employee")]
@rendermode InteractiveServer

@using EmployeeTraingsTracker.Services
@using EmployeeTraingsTracker.Model
@using Emp = EmployeeTraingsTracker.Model.Employee
@using Microsoft.AspNetCore.Authorization
@inject IEmployeeService EmployeeService
@inject ITrainingService TrainingService
@inject IEmployeeTrainingService EmployeeTrainingService
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<div class="max-w-5xl mx-auto p-4">
    <h2 class="text-3xl font-bold mb-6 text-gray-800">My Profile</h2>

    @if (employee is not null)
    {
        <!-- Profile Header -->
        <div class="bg-white  p-6 mb-6">
            <div class="border-b pb-4 mb-4">
                <h3 class="text-2xl font-semibold text-gray-800">@employee.Name</h3>
                <p class="text-gray-600">@employee.Designation • @employee.Department</p>
                <p class="text-sm text-gray-500">Employee ID: @(employee.EmployeeId ?? employee.Id.ToString())</p>
            </div>

            <!-- Personal & Professional Information -->
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                <!-- Personal Information -->
                <div class="space-y-4">
                    <h4 class="text-lg font-semibold text-gray-800 border-b pb-2">Personal Information</h4>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Full Name</label>
                        <input @bind="employee.Name" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Email</label>
                        <input value="@employee.Email" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2 bg-gray-50" readonly />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Phone Number</label>
                        <input @bind="employee.PhoneNumber" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Address</label>
                        <textarea @bind="employee.Address" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2" rows="2"></textarea>
                    </div>
                </div>

                <!-- Professional Information -->
                <div class="space-y-4">
                    <h4 class="text-lg font-semibold text-gray-800 border-b pb-2">Professional Information</h4>
                   
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Designation</label>
                        <input @bind="employee.Designation" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Department</label>
                        <input @bind="employee.Department" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Assigned Team</label>
                        <input @bind="employee.AssignedTeam" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Reports To</label>
                        <input @bind="employee.ReportsTo" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2" />
                    </div>
                </div>

                <!-- Emergency Contact -->
                <div class="space-y-4">
                    <h4 class="text-lg font-semibold text-gray-800 border-b pb-2">Emergency Contact</h4>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Contact Name</label>
                        <input @bind="employee.EmergencyContactName" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Contact Phone</label>
                        <input @bind="employee.EmergencyContactPhone" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2" />
                    </div>
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Relationship</label>
                        <input @bind="employee.EmergencyContactRelation" class="mt-1 block w-full border border-gray-300 rounded-md px-3 py-2" placeholder="e.g., Spouse, Parent" />
                    </div>
                </div>
            </div>

            <div class="mt-6 pt-4 border-t">
                <button class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700" @onclick="UpdateProfile">
                    Save Changes
                </button>
            </div>
        </div>

        <!-- Training Section -->
        <div class="bg-white shadow rounded-lg p-6">
            <h3 class="text-2xl font-semibold mb-6 text-gray-800">My Trainings</h3>

            <!-- Add Training -->
            <div class="bg-gray-50 p-4 rounded-lg mb-6">
                <h4 class="text-lg font-semibold mb-3">Enroll in Training</h4>
                <div class="flex gap-4 items-end">
                    <div class="flex-1">
                        <select @bind="selectedTrainingId" class="block w-full border border-gray-300 rounded-md px-3 py-2">
                            <option value="">-- Select Training --</option>
                            @foreach (var training in trainings)
                            {
                                <option value="@training.Id">@training.Title (@training.Category - @training.DurationHours hrs)</option>
                            }
                        </select>
                    </div>
                    <button type="button" class="bg-green-600 text-white px-6 py-2 rounded-md hover:bg-green-700" @onclick="AddTraining">
                        Enroll
                    </button>
                </div>
            </div>

            <!-- Training Statistics -->
            <div class="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
                <div class="bg-blue-50 p-4 rounded-lg text-center">
                    <div class="text-2xl font-bold text-blue-600">@completedTrainings.Count()</div>
                    <div class="text-sm text-gray-600">Total Enrolled</div>
                </div>
                <div class="bg-green-50 p-4 rounded-lg text-center">
                    <div class="text-2xl font-bold text-green-600">@completedTrainings.Count(t => t.IsCompleted)</div>
                    <div class="text-sm text-gray-600">Completed</div>
                </div>
                <div class="bg-yellow-50 p-4 rounded-lg text-center">
                    <div class="text-2xl font-bold text-yellow-600">@completedTrainings.Count(t => !t.IsCompleted)</div>
                    <div class="text-sm text-gray-600">In Progress</div>
                </div>
                <div class="bg-purple-50 p-4 rounded-lg text-center">
                    <div class="text-2xl font-bold text-purple-600">@completedTrainings.Where(t => t.IsCompleted).Sum(t => t.Training.DurationHours)</div>
                    <div class="text-sm text-gray-600">Hours Completed</div>
                </div>
            </div>

            <!-- Training List -->
            <div>
                <h4 class="text-lg font-semibold mb-4">Training Records</h4>
                @if (completedTrainings.Any())
                {
                    <div class="overflow-x-auto">
                        <table class="min-w-full divide-y divide-gray-200">
                            <thead class="bg-gray-50">
                                <tr>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Training</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Category</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Institute</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Duration</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Start Date</th>
                                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">End Date</th>
                                </tr>
                            </thead>
                            <tbody class="bg-white divide-y divide-gray-200">
                                @foreach (var et in completedTrainings.OrderByDescending(t => t.EnrolledOn))
                                {
                                    <tr>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <div class="text-sm font-medium text-gray-900">@et.Training.Title</div>
                                            <div class="text-sm text-gray-500">@et.Training.Description</div>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@et.Training.Category</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@et.Training.Institute</td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">@et.Training.DurationHours hrs</td>
                                        <td class="px-6 py-4 whitespace-nowrap">
                                            <span class="px-2 inline-flex text-xs leading-5 font-semibold rounded-full
                                                               @(et.IsCompleted ? "bg-green-100 text-green-800" : "bg-yellow-100 text-yellow-800")">
                                                @(et.IsCompleted ? "Completed" : "In Progress")
                                            </span>
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                            @(et.StartDate?.ToShortDateString() ?? "-")
                                        </td>
                                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                                            @(et.EndDate?.ToShortDateString() ?? "-")
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <p class="text-gray-500 text-center py-8">No training records found.</p>
                }
            </div>
        </div>
    }
    else
    {
        <div class="bg-red-50 border border-red-200 rounded-lg p-6">
            <h3 class="text-lg font-medium text-red-800">Profile Not Found</h3>
            <p class="mt-1 text-sm text-red-700">Your profile could not be loaded. Make sure your account email matches an employee record.</p>
        </div>
    }
</div>

@code
{
    private List<Training> trainings = new();
    private List<EmployeeTraining> completedTrainings { get; set; } = new();
    private int selectedTrainingId;
    private Emp employee;
    private int employeeId;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated ?? false)
        {
            string email = user.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Email)?.Value;

            if (!string.IsNullOrEmpty(email))
            {
                employee = await EmployeeService.GetByEmailAsync(email);

                if (employee != null)
                {
                    employeeId = employee.Id;
                    completedTrainings = await EmployeeTrainingService.GetForEmployeeAsync(employeeId);
                }
                else
                {
                    Navigation.NavigateTo("/NotAuthorized");
                    return;
                }
            }
        }

        trainings = await TrainingService.GetAllAsync();
    }

    private async Task UpdateProfile()
    {
        if (employee is not null)
        {
            await EmployeeService.UpdateAsync(employee);
        }
    }

    private async Task AddTraining()
    {
        if (selectedTrainingId > 0)
        {
            // Check if already enrolled
            bool alreadyEnrolled = completedTrainings.Any(ct => ct.TrainingId == selectedTrainingId);
            if (alreadyEnrolled)
            {
                return; // Already enrolled
            }

            var et = new EmployeeTraining
            {
                EmployeeId = employeeId,
                TrainingId = selectedTrainingId,
                EnrolledOn = DateTime.Now,
                IsCompleted = false
            };

            await EmployeeTrainingService.AddAsync(et);
            completedTrainings = await EmployeeTrainingService.GetForEmployeeAsync(employeeId);
            selectedTrainingId = 0;
        }
    }
}