@page "/trainings-manage"
@attribute [Authorize(Roles = "Admin")]

@rendermode InteractiveServer

@using EmployeeTraingsTracker.Model
@using EmployeeTraingsTracker.Services
@using Microsoft.AspNetCore.Authorization

@inject ITrainingService TrainingService

<h3 class="text-2xl font-bold mb-4">Manage Trainings</h3>

<!-- Add / Edit Training Form -->
<div class="bg-white shadow rounded-2xl p-6 mb-6 w-full max-w-2xl">
    <h4 class="text-lg font-semibold mb-4">@((EditingTraining?.Id > 0) ? "Edit Training" : "Add Training")</h4>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <!-- Title -->
        <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Training Title</label>
            <input @bind="EditingTraining.Title"
                   class="w-full border border-gray-300 rounded-lg p-3"
                   placeholder="Enter training title" />
        </div>

        <!-- Description -->
        <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Description</label>
            <textarea @bind="EditingTraining.Description"
                      class="w-full border border-gray-300 rounded-lg p-3"
                      rows="3"
                      placeholder="Enter training description"></textarea>
        </div>

        <!-- Category -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Category</label>
            <select @bind="EditingTraining.Category" class="w-full border border-gray-300 rounded-lg p-3">
                <option value="">Select Category</option>
                <option value="Technical">Technical</option>
                <option value="Safety">Safety</option>
                <option value="Soft Skills">Soft Skills</option>
                <option value="Compliance">Compliance</option>
                <option value="Leadership">Leadership</option>
                <option value="Professional Development">Professional Development</option>
                <option value="Other">Other</option>
            </select>
        </div>

        <!-- Duration -->
        <div>
            <label class="block text-sm font-medium text-gray-700 mb-1">Duration (Hours)</label>
            <input type="number" @bind="EditingTraining.DurationHours"
                   class="w-full border border-gray-300 rounded-lg p-3"
                   placeholder="0"
                   min="0" />
        </div>

        <!-- Institute -->
        <div class="md:col-span-2">
            <label class="block text-sm font-medium text-gray-700 mb-1">Training Institute/Provider</label>
            <input @bind="EditingTraining.Institute"
                   class="w-full border border-gray-300 rounded-lg p-3"
                   placeholder="Enter institute or training provider name" />
        </div>
    </div>

    <!-- Buttons -->
    <div class="flex gap-3 mt-6">
        <button type="button" class="bg-blue-600 text-white px-6 py-2 rounded-lg hover:bg-blue-700 transition duration-200"
                @onclick="SaveTraining">
            @((EditingTraining?.Id > 0) ? "Update Training" : "Add Training")
        </button>

        @if (EditingTraining?.Id > 0)
        {
            <button class="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 transition duration-200"
                    @onclick="CancelEdit">
                Cancel
            </button>
        }
    </div>
</div>

<!-- Training List -->
<div class="bg-white shadow rounded-2xl p-6">
    <h4 class="text-lg font-semibold mb-4">Training List</h4>

    @if (Trainings == null)
    {
        <p class="text-gray-500">Loading trainings...</p>
    }
    else if (Trainings.Count == 0)
    {
        <p class="text-gray-500">No trainings found.</p>
    }
    else
    {
        <div class="overflow-x-auto">
            <table class="w-full border-collapse border border-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="border border-gray-200 p-3 text-left font-medium text-gray-700">Title</th>
                        <th class="border border-gray-200 p-3 text-left font-medium text-gray-700">Category</th>
                        <th class="border border-gray-200 p-3 text-left font-medium text-gray-700">Institute</th>
                        <th class="border border-gray-200 p-3 text-left font-medium text-gray-700">Duration</th>
                        <th class="border border-gray-200 p-3 text-left font-medium text-gray-700">Description</th>
                        <th class="border border-gray-200 p-3 text-center font-medium text-gray-700">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var training in Trainings)
                    {
                        <tr class="hover:bg-gray-50">
                            <td class="border border-gray-200 p-3">
                                <div class="font-medium text-gray-900">@training.Title</div>
                            </td>
                            <td class="border border-gray-200 p-3">
                                @if (!string.IsNullOrEmpty(training.Category))
                                {
                                    <span class="px-2 py-1 text-xs font-medium bg-blue-100 text-blue-800 rounded-full">
                                        @training.Category
                                    </span>
                                }
                                else
                                {
                                    <span class="text-gray-400">-</span>
                                }
                            </td>
                            <td class="border border-gray-200 p-3">
                                <div class="text-sm text-gray-900">@(training.Institute ?? "-")</div>
                            </td>
                            <td class="border border-gray-200 p-3">
                                <div class="text-sm text-gray-900">
                                    @if (training.DurationHours > 0)
                                    {
                                        <span>@training.DurationHours hrs</span>
                                    }
                                    else
                                    {
                                        <span class="text-gray-400">-</span>
                                    }
                                </div>
                            </td>
                            <td class="border border-gray-200 p-3">
                                <div class="text-sm text-gray-700 max-w-xs truncate" title="@training.Description">
                                    @training.Description
                                </div>
                            </td>
                            <td class="border border-gray-200 p-3 text-center">
                                <div class="flex gap-2 justify-center">
                                    <button type="button" class="bg-yellow-500 text-white px-3 py-1 rounded text-sm hover:bg-yellow-600 transition duration-200"
                                            @onclick="() => EditTraining(training)">
                                        Edit
                                    </button>
                                    <button type="button" class="bg-red-600 text-white px-3 py-1 rounded text-sm hover:bg-red-700 transition duration-200"
                                            @onclick="() => DeleteTraining(training.Id)">
                                        Delete
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Training Statistics -->
        <div class="mt-6 grid grid-cols-2 md:grid-cols-4 gap-4">
            <div class="bg-blue-50 p-4 rounded-lg text-center">
                <div class="text-2xl font-bold text-blue-600">@Trainings.Count</div>
                <div class="text-sm text-gray-600">Total Trainings</div>
            </div>
            <div class="bg-green-50 p-4 rounded-lg text-center">
                <div class="text-2xl font-bold text-green-600">@Trainings.Where(t => !string.IsNullOrEmpty(t.Category)).GroupBy(t => t.Category).Count()</div>
                <div class="text-sm text-gray-600">Categories</div>
            </div>
            <div class="bg-purple-50 p-4 rounded-lg text-center">
                <div class="text-2xl font-bold text-purple-600">@Trainings.Sum(t => t.DurationHours)</div>
                <div class="text-sm text-gray-600">Total Hours</div>
            </div>
            <div class="bg-orange-50 p-4 rounded-lg text-center">
                <div class="text-2xl font-bold text-orange-600">@Trainings.Where(t => !string.IsNullOrEmpty(t.Institute)).GroupBy(t => t.Institute).Count()</div>
                <div class="text-sm text-gray-600">Institutes</div>
            </div>
        </div>
    }
</div>

@code
{
    private List<Training>? Trainings;
    private Training EditingTraining { get; set; } = new Training();

    protected override async Task OnInitializedAsync()
    {
        Trainings = await TrainingService.GetAllAsync();
    }

    private async Task SaveTraining()
    {
        // Basic validation
        if (string.IsNullOrWhiteSpace(EditingTraining.Title) || string.IsNullOrWhiteSpace(EditingTraining.Description))
        {
            // You can add error message display here
            return;
        }

        if (EditingTraining.Id == 0)
        {
            await TrainingService.AddAsync(EditingTraining);
        }
        else
        {
            await TrainingService.UpdateAsync(EditingTraining);
        }

        EditingTraining = new Training();
        Trainings = await TrainingService.GetAllAsync();
        StateHasChanged();
    }

    private void EditTraining(Training training)
    {
        EditingTraining = new Training
        {
            Id = training.Id,
            Title = training.Title,
            Description = training.Description,
            Category = training.Category,
            Institute = training.Institute,
            DurationHours = training.DurationHours
        };
    }

    private async Task DeleteTraining(int id)
    {
        await TrainingService.DeleteAsync(id);
        Trainings = await TrainingService.GetAllAsync();
        StateHasChanged();
    }

    private void CancelEdit()
    {
        EditingTraining = new Training();
    }
}